{"version":3,"sources":["src/const.ts","src/analytics/analytics-api.ts","src/analytics/analytics.ts","src/ab-test/const.ts","src/ab-test/local-storage.ts","src/ab-test/index.ts","src/api/logger.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.a70d0076.js","sourceRoot":"..","sourcesContent":["export const CTA_SELECTOR = 'data-cta' // for the button\nexport const userId = '1' // for the test reason id is here as a const\nexport const isRegisteredUser = false // We need only unregistered users\n\nexport const publicURL = '/abtest'","/**\n * Tracks a pageview to our \"imaginary api\" - in this demo just the browser console. ;)\n * Send as params whatever you might seem valuable to send.\n * The URL is probably a good start though.\n */\n\n\n// here we will send other data from navigator\ntype Payload = {\n  userId: string,\n  ts: number,\n  url: string,\n}\n\ntype PageViewPayload  = Payload & {\n    type: 'load' | 'unload'\n}\n\ntype EventPayload = Payload & {\n    type: 'click'\n}\n\n// send page events like open, close, scroll\nexport const trackPageview = (payload: PageViewPayload): void => {\n    const parsed: String = JSON.stringify(payload)\n    console.log(`--> Tracking Pageview: ${parsed}`);\n};\n\n// sent user events like press, click\nexport const trackEvent = (payload: EventPayload): void => {\n    const parsed: String = JSON.stringify(payload)\n    console.log(`--> Tracking Event: ${parsed}`);\n};\n","import {trackPageview, trackEvent} from \"./analytics-api\";\n\nexport const initAnalytics = (userId: string, url: string, ctaSelector: string): void => {\n  const loadPage = () => trackPageview({ts: Date.now(), url, type: 'load', userId})\n  const clickCta = () => trackEvent({ts: Date.now(), url, type: 'click', userId})\n  const unloadPage = () => {\n    window.removeEventListener('load', loadPage)\n    window.removeEventListener('click', clickCta)\n    window.removeEventListener('beforeunload', unloadPage)\n\n    trackPageview({ts: Date.now(), url, type: 'unload', userId})\n  }\n\n  window.addEventListener('load', loadPage)\n\n  const ctaButton = document.querySelector(`[${ctaSelector}]`)\n  if (ctaButton) ctaButton.addEventListener('click', clickCta)\n\n  window.addEventListener('beforeunload', unloadPage)\n}","export enum AB {\n  SELECTOR_NAME = 'data-test',  // main selector of the test. Only one per document\n  SELECTOR_EXPIRATION = 'data-expiration',  // date of test expiration\n  SELECTOR_VARIANT = 'data-variant',  // test variant letter\n  SELECTOR_IMAGE = 'data-src'  // for image optimization\n}\n\nexport enum LS {\n  KEY_NAME = 'APP_ABTEST'\n}","import {LS} from \"./const\";\n\nexport type LStest = {\n    ts: string,\n    url: string,\n    name: string\n    variant: string,\n    expiration: string,\n}\n\nfunction isLStest(item: any): item is LStest {\n    // explicit properties\n    if ((typeof item.ts !== 'string') && (typeof item.url !== 'string')) return false\n    if ((typeof item.name !== 'string') && (typeof item.variant !== 'string')) return false\n    if (typeof item.name !== 'string') return false\n    return true\n}\n\nexport const read = (url: string): LStest | null => {\n  const key = `${LS.KEY_NAME}_${url}`\n    const rawItem = localStorage.getItem(key)\n    if (!rawItem) return null\n    let item: unknown\n\n    try {\n        item = JSON.parse(rawItem)\n    } catch {\n        console.log('LS parsing error') // Not real log\n        remove(url)\n        return null\n    }\n\n    if (isLStest(item)) return item\n    return null\n}\n\nexport const write = (params: LStest): void => {\n    localStorage.setItem(`${LS.KEY_NAME}_${params.url}`, JSON.stringify(params))\n}\n\nexport const remove = (url: string): void => {\n  const key = `${LS.KEY_NAME}_${url}`\n  localStorage.removeItem(key)\n}","import {AB} from \"./const\";\nimport {LStest, read, remove, write} from \"./local-storage\";\nimport {publicURL} from \"../const\";\n\n// TODO later: optimize media loading with data-src\n\ntype InitParams = {\n    userId: string,\n    isRegisteredUser: boolean,\n    url: string\n}\n\nconst validateExpirationDate = (expirationDate: string): boolean => {\n    const date = new Date(expirationDate)\n\n    if (date.toString() === 'Invalid date') return false\n    if (date.getTime() <= Date.now()) return false\n\n    return true\n}\n\nconst hideOtherVariants = (variants: Element[]) => (name?: string): void => {\n    let variantIndex = 0;\n    if (name) {\n        variantIndex = variants.findIndex(node => node.getAttribute(AB.SELECTOR_VARIANT) === name);\n    }\n    if (variantIndex < 0) variantIndex = 0; // show default\n    [...variants.slice(0, variantIndex), ...variants.slice(variantIndex + 1)].forEach(node => node.remove())\n}\n\nconst hideLoader = () => {\n  const loader = document.querySelector('.loader')\n  loader?.remove()\n}\n\nconst loadimages = async () => {\n  const unloadedImages = document.querySelectorAll(`[${AB.SELECTOR_IMAGE}]`)\n  if (unloadedImages.length === 0) return\n\n  const array = <any>[]\n\n\n  unloadedImages.forEach(el => {\n    const img = el as HTMLImageElement\n    const src = img.getAttribute(AB.SELECTOR_IMAGE)\n\n    if (process.env.NODE_ENV === 'production') {\n      src && img.setAttribute('src', publicURL + src)\n    } else {\n      src && img.setAttribute('src', src)\n    }\n\n\n\n    array.push(img.decode())\n  })\n\n  await Promise.all(array)\n}\n\n\nexport const initABTest = (params: InitParams, log?: (payload: string) => void): void => {\n    const testEl = document.querySelector(`[${AB.SELECTOR_NAME}]`)\n    if (!testEl) return // no test, show as is, OK\n\n    const testVariants = testEl.querySelectorAll(`[${AB.SELECTOR_VARIANT}]`)\n    if (testVariants.length < 2) {\n        log?.('AB test, less then 2 variants')\n        remove(params.url)\n        return\n    } // log ERROR, show as is\n\n  const showVariant = async (name?: string) => {\n      hideOtherVariants(Array.from(testVariants))(name)\n      await loadimages()\n      hideLoader()\n    }\n\n    // Further we have two+ variants\n    const testName = testEl.getAttribute(AB.SELECTOR_NAME)\n    if (!testName) {\n        log?.('AB test, no test name')\n        remove(params.url)\n        showVariant()\n        return\n    }\n\n\n    const expirationDate = testEl.getAttribute(AB.SELECTOR_EXPIRATION)\n    if (!expirationDate) {\n        log?.('AB test, no expiration date')\n        remove(params.url)\n        showVariant()\n        return\n    }// log error, select first variant (control)\n    if (!validateExpirationDate(expirationDate)) {\n        log?.('AB test, wrong expiration date')\n        remove(params.url)\n        showVariant()\n        return\n    }\n\n    if (params.isRegisteredUser) {\n        showVariant()\n        return\n    }// select first variant (control)\n\n    // check LS\n    const variantFromLS = (test: LStest): string | void => {\n        const compareTestAndLS = (test: LStest, ls: LStest): boolean => {\n            if (test.name !== ls.name) return false\n            if (test.expiration !== ls.expiration) return false\n            if (test.url !== ls.url) return false\n            return true\n        }\n\n        const lsVariant = read(params.url)\n        if (!lsVariant) return\n        if (!compareTestAndLS(test, lsVariant)) {\n            log?.('AB test, wrong LS data')\n            return\n        }\n\n        return lsVariant.variant\n    }\n\n    const test: LStest = {\n        ts: `${Date.now()}`,\n        variant: 'A',\n        name: testName,\n        url: params.url,\n        expiration: expirationDate\n    }\n    const LStestVariant = variantFromLS(test)\n    if (LStestVariant) {\n        showVariant(LStestVariant)\n        return\n    }\n\n    // randomly assign a variant, show it\n    const numberOfVariants: number = testVariants.length\n    const randomVariant: number = Math.floor(Math.random() * numberOfVariants);\n    const randomName = Array.from(testVariants)[randomVariant].getAttribute(AB.SELECTOR_VARIANT)\n\n    if (!randomName) {\n        log?.('AB test, can not define random variant name')\n        showVariant()\n        return\n    }\n\n    write({\n        ...test,\n        variant: randomName,\n    })\n    showVariant(randomName)\n}\n","type LoggerEvent = {\n  url: string,\n  type: 'error',\n  payload: string\n}\n\n// logs events params: type, url, payload\nexport const log = (payload: LoggerEvent): void => {\n  console.log(`--> Logger: ${JSON.stringify(payload)}`);\n};","import \"./styles.css\";\nimport {CTA_SELECTOR, userId, isRegisteredUser} from \"./const\";\nimport {initAnalytics} from \"./analytics/analytics\";\nimport {initABTest} from \"./ab-test\"\nimport {log} from \"./api/logger\"\n\n// Your code here\n\n// Parse HTML for test info\n// Parse cookies\n// Compare cookies and HTML\n// Apply final variant changes to HTML\n\n\n// TODO\n\n// Add analytics tracker\nconst url: string = window.location.href\nconst logger = (payload: string) => log({url, type: 'error', payload})\n\ninitAnalytics(userId, url, CTA_SELECTOR)\ninitABTest({url, userId, isRegisteredUser}, logger)\n\n\n\n\n// Work with HTML service\n// Work with cookie service\n// Log errors servise"]}